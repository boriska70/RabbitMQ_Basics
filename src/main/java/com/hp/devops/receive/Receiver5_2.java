package com.hp.devops.receive;

import com.hp.devops.utils.PropertiesLoader;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer;

import java.io.IOException;
import java.util.Properties;

/**
 * User: belozovs
 * Date: 9/21/14
 * Description
 */
public class Receiver5_2 {

    private final static String QUEUE_NAME_SUFFIX = "_task_queue";

    private static String MQ_SERVER_NAME;
    private static int MQ_SERVER_PORT;
    private static String MQ_SERVER_USERNAME;
    private static String MQ_SERVER_PASSWORD;
    private static String QUEUE_NAME;
    private static String DISTRIBUTOR_EXCHANGE;

    public static void main(String[] args)  {

        Connection connection=null;
        Channel channel=null;

        try{
        init();

        ConnectionFactory factory = new ConnectionFactory();
        factory.setHost(MQ_SERVER_NAME);
        factory.setPort(MQ_SERVER_PORT);
        factory.setUsername(MQ_SERVER_USERNAME);
        factory.setPassword(MQ_SERVER_PASSWORD);
        connection = factory.newConnection();
        channel = connection.createChannel();

        boolean isDurable = true;
        //Channel declares the DURABLE TOPIC exchange to allow flexible multiple bindings
        DISTRIBUTOR_EXCHANGE = QUEUE_NAME+"_TOPIC";
        channel.exchangeDeclare(DISTRIBUTOR_EXCHANGE, "topic", isDurable);
        //dynamically get the real queue name generated by the server...
        String actualQueueName = channel.queueDeclare().getQueue();
        channel.queueBind(actualQueueName, DISTRIBUTOR_EXCHANGE, "*.bye");
        channel.queueBind(actualQueueName, DISTRIBUTOR_EXCHANGE, "hello.#");
        System.out.println(" [*] Waiting for messages. To exit press CTRL+C");

        channel.queueDeclare("Hello", isDurable, false, false, null);
        channel.queueDeclare("Bye", isDurable, false, false, null);
        channel.queueBind("Hello", DISTRIBUTOR_EXCHANGE, "hello.#");
        channel.queueBind("Bye", DISTRIBUTOR_EXCHANGE, "*.bye");

        QueueingConsumer consumer = new QueueingConsumer(channel);
        //ack will be sent explicitly
        boolean autoAck = false;
        channel.basicConsume("Hello", autoAck, consumer);
        channel.basicConsume("Bye", autoAck, consumer);

        while (true) {
            QueueingConsumer.Delivery delivery = consumer.nextDelivery();
            String message = new String(delivery.getBody());
            String routingKey = delivery.getEnvelope().getRoutingKey();
            System.out.println(" [x] Received '" + message + "' with routing key " + routingKey);
            channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);
        }
        } catch (Exception e){
            e.printStackTrace();
        } finally {
            if(channel!=null){
                try {
                    channel.close();
                } catch (IOException ignore){}
            }
            if(connection!=null){
                try {
                    connection.close();
                } catch (IOException ignore) {}
            }
        }

    }

    private static void init() {
        Properties properties = PropertiesLoader.getProperties("app");
        MQ_SERVER_NAME = properties.getProperty("MQ_SERVER_NAME");
        MQ_SERVER_PORT = Integer.parseInt(properties.getProperty("MQ_SERVER_PORT"));
        MQ_SERVER_USERNAME = properties.getProperty("MQ_SERVER_USERNAME");
        MQ_SERVER_PASSWORD = properties.getProperty("MQ_SERVER_PASSWORD");
        QUEUE_NAME = properties.getProperty("QUEUE_NAME");
    }


}
